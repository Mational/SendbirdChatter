package com.mational.sendbirdchatter.presentationimport android.content.Intentimport android.os.Bundleimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Surfaceimport androidx.compose.ui.Modifierimport androidx.lifecycle.lifecycleScopeimport com.google.firebase.auth.FirebaseAuthimport com.mational.sendbirdchatter.data.firebase.AuthManagerimport com.mational.sendbirdchatter.domain.repository.SendBirdRepositoryimport com.mational.sendbirdchatter.presentation.navigation.Navimport com.mational.sendbirdchatter.presentation.navigation.NavigationManagerimport com.sendbird.uikit.compose.theme.SendbirdThemeimport dagger.hilt.android.AndroidEntryPointimport kotlinx.coroutines.launchimport javax.inject.Inject@AndroidEntryPointclass MainActivity : ComponentActivity() {    @Inject    lateinit var sendBirdRepository: SendBirdRepository    @Inject    lateinit var authManager: AuthManager    @Inject    lateinit var navigationManager: NavigationManager    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        intent?.extras?.let { extras ->            handleNotificationData(extras)        }        setContent {             SendbirdTheme {                Surface(                    modifier = Modifier.fillMaxSize(),                    color = MaterialTheme.colorScheme.background                ) {                    Nav(navigationManager)                }            }        }    }    override fun onNewIntent(intent: Intent) {        super.onNewIntent(intent)        intent.extras?.let { extras ->            handleNotificationData(extras)        }    }    private fun handleNotificationData(extras: Bundle) {        val loginResult = authManager.autoLogin()        loginResult.onSuccess { userId ->            val currentUser = FirebaseAuth.getInstance().currentUser            val email = currentUser?.email ?: return@onSuccess            lifecycleScope.launch {                val getSendBirdUserResult = sendBirdRepository.getSendBirdUser(userId, email)                getSendBirdUserResult.onSuccess { sendBirdUser ->                    sendBirdRepository.prepareSendBird(sendBirdUser)                    navigationManager.navigateToChannel(extras.getString("channelUrl") ?: "")                }            }        }    }}